Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  ApplicationName:
    Type: String
  Environment:
    Type: String
  AcmCertificateArn:
    Type: String
  SslDomainName:
    Type: String
  Stack:
    Type: String
  HostedZoneId:
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.40.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.30.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment} Private Subnet (AZ1)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName} ${Environment} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub public-ingress-sg-${Environment}
      GroupDescription: "Security group allowing ingress from anywhere"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 5683
          CidrIp: 0.0.0.0/0
          Description: CoAP
          IpProtocol: UDP
          ToPort: 5683

  PublicHttpsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub public-https-ingress-sg-${Environment}
      GroupDescription: "Security group allowing ingress from anywhere"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
          IpProtocol: TCP
          ToPort: 443

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub private-ingress-sg-${Environment}
      GroupDescription: "Security group allowing ingress from public sg"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 443
          IpProtocol: TCP
          CidrIp: !Ref PublicSubnet1CIDR
          ToPort: 443
        - FromPort: 80
          IpProtocol: TCP
          CidrIp: !Ref PublicSubnet1CIDR
          ToPort: 80

  # PrivateApiEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     # PolicyDocument: Json
  #     PrivateDnsEnabled: true
  #     # RouteTableIds:
  #     #   - !Ref PrivateRouteTable1
  #     SecurityGroupIds:
  #       - !Ref PrivateSecurityGroup
  #     ServiceName: com.amazonaws.us-east-1.execute-api
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #     VpcEndpointType: Interface
  #     VpcId: !Ref VPC

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicHttpsSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Certificates:
        - CertificateArn: !Ref AcmCertificateArn
      Protocol: HTTPS

  # Route53 record pointing to load balancer
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt: ["ApplicationLoadBalancer", "CanonicalHostedZoneID"]
        DNSName:
          Fn::GetAtt: ["ApplicationLoadBalancer", "DNSName"]
        EvaluateTargetHealth: false
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ${Stack}-${Environment}.${SslDomainName}
      Type: A

      # Comment: String
      # Failover: String
      # GeoLocation:
      #   GeoLocation
      # HealthCheckId: String
      # HostedZoneName: String
      # MultiValueAnswer: false
      # Region: !Ref AWS::Region
      # ResourceRecords:
      #   - !GetAtt ApplicationLoadBalancer.DNSName
      # SetIdentifier: String
      # TTL: 300
      # Weight: Integer

  # Customer API Gateway Domain

  # # ------------------------------------------------------------#
  # # Lambda
  # # ------------------------------------------------------------#
  # LambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - sts:AssumeRole

  # LambdaPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: LambdaPolicy
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - ec2:*
  #             - logs:*
  #           Resource: "*"
  #     Roles:
  #       - !Ref LambdaRole

  # LambdaFunction:
  #   Type: "AWS::Lambda::Function"
  #   DeletionPolicy: "Delete"
  #   Properties:
  #     Code:
  #       ZipFile: !Sub |
  #         import cfnresponse
  #         import json
  #         import boto3
  #         def lambda_handler(event, context):
  #             print('REQUEST RECEIVED:\n' + json.dumps(event))
  #             responseData = {}
  #             if event['RequestType'] == 'Delete' or event['RequestType'] == 'Update':
  #               cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
  #               return
  #             if event['RequestType'] == 'Create':
  #               try:
  #                 ec2 = boto3.resource('ec2')
  #                 enis = event['ResourceProperties']['NetworkInterfaceIds']
  #                 for index, eni in enumerate(enis):
  #                   network_interface = ec2.NetworkInterface(eni)
  #                   print(network_interface.id)
  #                   responseData['IP' + str(index)] = network_interface.private_ip_address
  #                   print(responseData)
  #               except Exception as e:
  #                 responseData = {'error': str(e)}
  #                 cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
  #                 return
  #               cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
  #     Handler: index.lambda_handler
  #     Role: !GetAtt LambdaRole.Arn
  #     Runtime: python3.7
  #     Timeout: 10

  # # # ------------------------------------------------------------#
  # # # Custom Resource
  # # # ------------------------------------------------------------#
  # GetPrivateIPs:
  #   DependsOn:
  #     - PrivateApiEndpoint
  #   Type: Custom::GetPrivateIPs
  #   Properties:
  #     ServiceToken: !GetAtt LambdaFunction.Arn
  #     NetworkInterfaceIds: !GetAtt PrivateApiEndpoint.NetworkInterfaceIds

Outputs:
  VpcId:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-VpcId

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-PrivateSubnet1

  PublicHttpsSecurityGroup:
    Value: !Ref PublicHttpsSecurityGroup
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-PublicHttpsSecurityGroup

  PrivateSecurityGroup:
    Description: Security group
    Value: !Ref PrivateSecurityGroup
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-PrivateSecurityGroup

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-NoIngressSecurityGroup

  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-TargetGroupArn
